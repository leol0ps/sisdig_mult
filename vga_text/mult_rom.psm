;=========================================================
; multiplication circuit with bcd input/output
;=========================================================
;Program operation:
;  - read a and b from switch
;  - calculate a*b 
;  - display data on vga

;=========================================================
; Data ram address alias
;=========================================================
constant a_lsb, 00    
constant b_lsb, 02    
constant aa_lsb, 04    
constant aa_msb, 05   
constant bb_lsb, 06    
constant bb_msb, 07   
constant aabb_lsb, 08    
constant aabb_msb, 09   
constant aabb_cout, 0A   
constant led0, 10
constant led1, 11
constant led2, 12
constant led3, 13
constant save, 14
constant p_bcd_result_lsb,15
constant p_bcd_result_msb,16
constant a_bin, 17
constant b_bin, 18
constant prod_lsb, 19
constant prod_msb, 20

;=========================================================
; Register alias
;=========================================================
;commonly used local variables
namereg s0, data       ;reg for temporary data
namereg s1, addr       ;reg for temporary mem & i/o port addr
namereg s2, i          ;general-purpose loop index
;global variables
namereg sf, switch_a_b ;ram offset for current switch input 

;=========================================================
; Port alias
;=========================================================
;------------input port definitions---------------------
constant rd_flag_port, 00  ;2 flags (xxxxxxsc):
constant sw_port, 01       ;8-bit switch
constant mult_prod0_port, 02   ;multiplication product 8 LSBs
constant mult_prod1_port, 03   ;multiplication product 8 MSBs
;------------output port definitions---------------------
constant result_lsb_port,     00    ;
constant result_msb_port,     01    ;
constant mult_src0_port, 02    ;multiplier operand 0
constant mult_src1_port, 03    ;multiplier operand 1
constant erro_port, 04 ; flag de erro

;=========================================================
; Main program
;=========================================================
;Calling hierarchy:
;
;main
;  - init
;  - proc_btn
;      - init
;  - convert_bcd_to_bin
;  - multab
;   	- mult_hard
;  - convert_bin_to_bcd		
;  - port output
; =========================================================

   call init               ;initialization
forever:
   ;main loop body
   
   call proc_btn           ;check & process buttons
   call convert_bcd_to_bin;
   call multab             ;calculate a*b
   call convert_bin_to_bcd
   call final_bcd_result      ; output produto bcd final
   jump forever

;=========================================================
;routine: init
;  function: perform initialization, clear register/ram
;  output register: 
;    switch_a_b: cleared to 0
;  temp register: data, i
;=========================================================
init:
   ;clear memory
   load i, 40              ;unitize loop index to 64
   load data, 00
clr_mem_loop:
   store data, (i)
   sub i, 01               ;dec loop index
   jump nz, clr_mem_loop   ;repeat until i=0
   ;clear register 
   load switch_a_b, 00
   return  

;=========================================================
;routine: proc_btn
;  function: check two buttons and process the display
;  input reg: 
;     switch_a_b: ram offset (0 for a and 2 for b)   
;  output register: 
;     s3: store input port flag      
;     switch_a_b: may be toggled
;  temp register used: data, addr
;=========================================================
proc_btn:
   input s3, rd_flag_port  ;get flag
   ;check and process c button
   test s3, 01             ;check c button flag
   jump z, chk_btns        ;flag not set
   call init               ;flag set, clear
   jump proc_btn_done
chk_btns:
   ;check and process s button
   test s3, 02             ;check s button flag
   jump z, proc_btn_done   ;flag not set
   input data, sw_port     ;get switch
   call check_bcd_valid;check bcd
   load addr, a_lsb        ;get addr of a
   add addr, switch_a_b    ;add offset
   
   store data, (addr)      ;write data to ram
   ;update current disp position
   xor switch_a_b, 02      ;toggle between 00, 02
proc_btn_done:
   return

;=========================================================
;routine:  final_bcd_result
;  function: returns  multiplication result in bcd
;=========================================================
final_bcd_result:
	load data, prod_lsb
	output data, result_lsb_port
	load data, prod_msb
	output data, result_msb_port
	return
;=========================================================
;routine: multab
;  function: get  a*b bin result
;=========================================================
multab:
	fetch s3,a_bin
	fetch s4, b_bin
	call mult_hard
	store s5, prod_lsb;
	store s6, prod_msb
	return



;=========================================================
;routine: convert_bin_to_bcd
;  function: check if it is a bcd number
;  input register: 
;  output register: 
;=========================================================
convert_bin_to_bcd:
	fetch s3,prod_lsb;
	fetch s4, prod_msb
	load i,10;
	AND s5,00 ;BCD0,BCD1
	AND S6,00 ;BC1,BCD2
alg_loop:
	;CHECAR SE ALGUM DIGITO BCD Ã‰ MAIOR QUE 4
	load s7,s5
	AND s7,0F ; BCD0
	load sE, 05
	compare sE,s7 ; bcd0 >4?
	jump c, BCD1_label ; nop
	ADD s7,03 ;yes +3
BCD1_label:
	load s8,s5
	AND s8,F0;BCD1
	load sE, 50
	compare sE,s8; bcd1 > 4?
	jump c, BCD2_label ; nop
	ADD s8,30; yes +3
BCD2_label:
	load s9,s6 
	AND s9,0F; BCD2
	load sE,05
	compare sE,s9; bcd2 >4?
	jump c, BCD3_label ; nop
	ADD s9,03 ; yes
BCD3_label:
	load sA,s6
	AND sA,F0; BCD3
	load sE,50
	compare sE,sA; BCD3 >4?
	jump c, shift_pronto; nop
	ADD sA,30; yes
shift_pronto:
	AND s5,00;
	ADD s5,s7;
	ADD s5,s8;
	AND s6,00;
	ADD s6,s9
	ADD s6,sA
	sl0 s3
	slA s4;
	slA s5
	slA s6
	sub i, 01              ;dec loop index
	jump nz, alg_loop     ;repeat until i=0
	store s5, p_bcd_result_lsb
	store s6, p_bcd_result_msb
	return
;=========================================================
;routine: convert_bcd_to_bin
;  function: check if it is a bcd number
;  input register: data
;  output register: data
;=========================================================
convert_bcd_to_bin:
	load i,08
	fetch s3,a_lsb;
	fetch s4,b_lsb;
	AND s5,00; a_bin
	AND s6,00; b_bin
convert_loop:
	sr0 s3; shift right a
	srA s5;
	sr0 s4; shift right b
	srA s6;
	;checar se  bcd > 7 se for subtrair 3
	load s7,s3
	load s8,s3
	AND s7,0F ; a_bcd0
	AND s8,F0 ; a_bcd1
	load sE,08
	compare sE,s7 ; bcd0>7?
	jump c, next_bcd; nop
	sub s7,03
next_bcd:
	load sE,80
	compare sE,s8; bcd1>7?
	jump c,b_part
	sub s8,30
b_part:
	load s9,s4
	load sA,s4
	AND s9,0F ; b_bcd0
	AND sA,F0 ; b_bcd1
	load sE,08
	compare sE,s9 ; bcd0>7?
	jump c, next_bcd_b; nop
	sub s7,03
next_bcd_b:
	load sE,80
	compare sE,sA; bcd1>7?
	jump c, sum_bcd
	sub s8,30
sum_bcd:
	load s3,00;
	load s4,00;
	ADD s3,s7
	ADD s3,s8
	ADD s4,s9
	ADD s4,sA
	sub i, 01              ;dec loop index
	jump nz, convert_loop     ;repeat until i=0
	store s5,a_bin
	store s6,b_bin
	return
	
;=========================================================
;routine: check_bcd_valid
;  function: check if it is a bcd number
;  input register: data
;  output register: data
;=========================================================
check_bcd_valid:
	compare data, 0A ;
	jump c, valid
	jump bcd_error 
valid:
		load data, 00
		output data, erro_port
		return
bcd_error:
	load data, ff
	output data, erro_port
	return
	;enviar error


;=========================================================
;routine: get_lower_nibble
;  function: get lower 4-bit of data
;  input register: data
;  output register: data
;=========================================================

get_lower_nibble:
   and data, 0F           ;clear upper nibble
   return

;=========================================================
;routine: get_lupper_nible
;  function: get upper 4-bit of in_data
;  input register: data
;  output register: data
;=========================================================
get_upper_nibble:
   sr0 data               ;right shift 4 times
   sr0 data
   sr0 data
   sr0 data
   return



;=========================================================
;routine: mult_hard
;  function: 8-bit unsigned multiplication using
;            external combinational multilplier;
;  input register:
;     s3: multiplicand
;     s4: multiplier
;  output register:
;     s5: upper byte of product
;     s6: lower byte of product
;  temp register: 
;=========================================================
mult_hard:
   output s3, mult_src0_port
   output s4, mult_src1_port
   input s5, mult_prod0_port ; lower
   input s6, mult_prod1_port ; upper
   return






